#parte3 

"""
los movimientos de las piezas, peon, torre, caballo, alfin, reina y rey.
"""

from shutil import move
from tracemalloc import start
from turtle import back

#clavado y jaque
    def getPawnMoves(self, r, c moves):
        """"Verifica el estado de la pieza y detecta por que por encima de ella hay un posible jaque al rey, entonces la bloquea."""
        piecepinned = False
        pinDirection = ()
        for i in range (len(self.pins)-1 -1, -1):
            if self.pins[i][0] == r and self.pins[i][1] == c:
                piecepinned = True
                pinDirection = (self.pins[1][2], self.pins[i][3])
                self.pins.remove(self.pins[i])
                break 
#verificacion de bando 
        if self.whateToMove:
            moveAmount = -1 
            startRow = 6
            backRow = 0
            enemycolor = 'b'
        else:
            moveAmount = 1
            startRow = 1
            backRow = 7
            enemycolor = 'w'

        PawnPromotion = False
#dezplazamiento
        if self.board[r + moveAmount][c] == '_ _': #Movimiento en una casilla
            if not piecepinned or pinDirection == (moveAmount, 0):
                if r + moveAmount == backRow:
                    PawnPromotion = True
                moves.append(move((r, c), (r + moveAmount, c), self.board, PawnPromotion = PawnPromotion))
                if r == startRow and self.board[r + 2 * moveAmount][c] == "--": #Moviemiento en dos casillas.
                    moves.append(move((r, c), (r + 2 * moveAmount, c), self.board,))

        if c - 1 >= 0: #Captura a la izquierda.
            if not piecePinned or pinDirection == (moveAmount, -1):
                if self.board[r + moveAmount][c - 1][0] == enemycolor:
                    if r + moveAmount == backRow:
                        PawnPromotion = True
                        moves.append(Move((r, c), (r + moveAmount, c - 1), self.board, PawnPromotion = PawnPromotion))
                if (r + moveAmount, c - 1) == self.enPassantPossible:
                    moves.append(Move((r, c), (r + moveAmount, c - 1 ), self.board, enPassantPosible = True))
                     
        if c + 1 <= 7: #captura la derecha.
            if not piecepinned or pinDirection == (moveAmount, 1):
                if self.board[r + moveAmount][c + 1][0] == enemycolor:
                  if r + moveAmount == backRow:
                        PawnPromotion = True  
                        moves.append(Move((r, c), (r + moveAmount, c + 1), self.board, PawnPromotion = PawnPromotion))
                if (r + moveAmount, c + 1) == self.enPassantPossible:
                    moves.append(Move((r, c), (r + moveAmount, c + 1 ), self.board, enPassantPosible = True))

    def getRookMoves(self, r, c, moves):
        """ Esto lo que hace es verificar el estado de la pieza y si detecta que por encima de ella hay un posible jaque al rey, entonces la bloquea."""
        piecePinned = False
        pinDirection = ()
        for i in range(len(self.pins)-1, -1, -1):
            if self.pins[i][0] == r and self.pins[i][1] == c:
                piecePinned = True
                pinDirection = (self.pins[i][2],self.pins[i][3])
                if self.board[r][c][1] != 'Q':
                    self.pins.remove(self.pins[i])
                break
       #Los moviemientos naturales de la pieza.
        directions = ((-1, 0), (0, -1), (1, 0), (0,-1))
        enemyColor = "b" if self.whiteTomeMove else "w"
        for d in directions:
            for i in range (1, 8):
                endRow = r + d[0] * i
                endCol = c + d[1] * i
                if 0 <= endRow < 8 and 0 <= endCol < 8: #Dentro del tablero.
                    if not piecePinned or pinDirection == d or pinDirection == (-d[0], -d[1]): #Evita mover la pieza en caso que este clavada.
                        endPice = self.board[endRow][endCol]
                        if endPice == "--": #espacio libre y valido.
                            moves.apped(move((r, c), (endRow, endCol), self.board))
                        elif endPice[0] ==enemyColor: #Captura legal.
                            moves.apped(move((r, c), (endRow, endCol), self.board))
                            break
                        else: #evitar el fuego aliado
                            break
                else: #fuera del tabalero.
                    break

    def getknightMoves (self, r, c, moves):
        """Esto lo que hace es verificar el estado de la pieza y si detecta que por
        encima de ella hay un posible jaque al rey, entonces la bloquea."""
        piecePinned = False
        for i in range(len(self.pins)-1, -1, -1):
            if self.pins[i][0] == r and self.pins[i][1] == c:
                piecePinned = True
                self.pins.remove(self.pins[i])
                break
        #Los movientos naturales de la pieza. 
        knightMoves = ((-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1))
        allyColor ="w" if self.whiteToMove else "b"
        for m  in knightMoves:
            endRow = r + m[0]
            endcol = c + m[1]
            if 0 <= endRow < 8 and 0 <= endcol < 8:
                if not piecePinned:
                    endPiece = self.board[endRow][endcol]
                    if endPiece[0] != allyColor: #Tanto para el desplazamiento como para la captura.
                        moves.append(move((r, c), (endRow, endcol), self.board))

    def getBishopMoves (self, r, c, moves):
            """Esto lo que hace es verificar el estado de la pieza y si detecta que por
            encima de ella hay un posible jaque al rey, entonces la bloquea."""
            piecePinned = False
            pinDirection = ()
            for i in range(len(self.pins)-1, -1, -1):
                if self.pins[i][0] == r and self.pins[i][1] - c:
                    piecePinned = True
                    pinDirection (self.pins[i][2], self.pins[i][3])
                    self.pins.remove(self.pins[i])
                    break
        #Los movientos naturales de la pieza.
            directions = ((-1, -1), (1, -1), (-1, 1), (1, 1))
            enemyColor = "b" if self.whiteToMove else "w"
            for d in directions:
                for i in range (1, 8):
                    endRow = r + d[0] * i
                    endcol = c + d[1] * i
                    if 0 <= endRow < 8 and 0 <= endcol < 8: #Dentro del tablero.
                        if not piecePinned or pinDirection == d or pinDirection == (-d[0], -d[1]): #Evita mover la pieza en caso de que este clavada.
                            endPiece = self.board[endRow][endcol]
                            if endPiece == "--": #Espacio libre y válido.
                                moves.append(move((r, c), (endRow, endcol), self.board))
                            elif endPiece[0] == enemyColor: #Captura legal.
                                moves.append(move((r, c), (endRow, endcol), self.board))
                                break
                            else: #Evitar el fuego aliado.
                                break
                        else: #Fuera del tablero.
                            break
        
    def getQueenMoves(self, r, c, moves):
        self.getRookMoves(r,c, moves)
        self.getBishopMoves (r, c, moves)

    def getKnightMoves(self, r, c, moves):
        rowMoves = (-1, -1, -1, 0, 0, 1, 1, 1)
        colMoves = (-1, 0, 1, -1, 1, -1, 0, 1)
        allyColor = "w" if self.whiteToMove else "b"
        for m in range (8):
            endRow = r + rowMoves[m]
            endCol = c + colMoves[m]
            if 0 <= endRow < 8 and 0 <= endCol < 8:
                endPiece = self.board[endRow][endCol]
                if endPiece[0] != allyColor: #Tanto para el desplazamiento como para la captura.
                    if allyColor == 'w': #Actualización de las coordenas del rey blanco.
                        self.whitekingLocation = (endRow, endCol)
                    else: #Actualización de las coordenas del rey negro.
                        self.blackkinglocation(endRow, endCol)
                    inCheck, pins, checks = self.checkForPinsAndChecks()
                    if not inCheck:
                        moves.append(move((r, c), (endRow, endCol), self.board))
                    if allyColor == "W":
                        self.whitekingLocation = (r, c)
                    else:
                        self.blackkingLocation = (r, c)
        self.getCastleMoves(r, c, moves, allyColor)

    def getCastleMoves(self, r, c, moves, allyColor):
        inCheck = self.squnderAttack(r, c, allyColor)
        if inCheck: #Evita el enroque por amenaza de jague.
            return
        if (self.whiteToMove and self.wCastleKingside) or (not self.whiteToMove and self.bCastlekingside): #enroque corto.
            self.getKingsideCastleMoves(r, c, moves, allyColor)
        if (self.whiteToMove and self.wcastleQueenside) or (not self.whiteToMove and self.bcastleQueenside): #enroque largo.
            self.getQueensideCastleMoves (r, c, moves, allyColor)

    def getKingsideCastleMoves(self, r, c, moves, allyColor): #Enroque corto.
        if self.board[r][c + 1] == '--' and self.board[r][c + 2] == '--' and not self.sqUnderAttack(r, c + 1, allyColor) and not self.sqUnderAttac(r, c + 2,
        allyColor):
            moves.append(move((r, c), (r, c+ 2), self.board, castle = True)) 

    def getQueensidecastleMoves(self, r, c, moves, allyColor): #Enroque largo.
        if self.board[r][c - 1] == '--' and self.board[r][c - 2] == '--' and self.board[r][c - 3] == '--' and not  self.sqUnderAttack(r,
        self.sqUnderAttack(r, c - 2, allyColor):
            moves.append(move((r, c), (r, c - 2), self.board, castle = True))
            
    def sqUnderAttack(self,r, c, allyColor):
        enemycolor = "w" if allyColor == 'b' else 'b'
        directions = ((-1, 0), (0, -1), (1, 0), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1))
        for j in range(len(directions)):
            d = directions[j]
            for i in range(1, 8):
                endRow = r + d[0] * i
                endCol = c + d[1] * i
                if 0 <= endRow < 8 and 0 <= endCol < 8:
                    endPiece = self.board[endRow][endCol]
                    if endPiece[0] == allyColor: #No atacar por esa dirección.
                        break
                    elif endPiece[0] == enemycolor:
                        type = endPiece[1] 
                        if (0 <= j <= 3 and type =='R') or \
                            (4 <= j <= 7 and type == 'b') or \
                            (i == 1 and type =='p' and ((enemycolor == 'w' and 6 <= j < 7) or (enemycolor == 'b' and 4 <= j < 5))) or \
                            (type =='Q') or \
                            (i == 1  and type == 'k'):
                            return True
                        else: #En caso de no haber de jaque o amenaza de uno.
                            break
                else: #Fuera de limites.
                    break

        #Jaques del caballo.
        knightMoves = ((-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1))
        for m in knightMoves:
            endRow = r + m[0]
            endCol = c + m[1]
            if 0 <= endRow <8 and 0 < endCol <= 8:
                endPiece = self.board[endRow][endCol]
                if endPiece[0] == enemycolor and endPiece[1] =='N': #Cuando el caballo ataca al rey.
                    return True
        return False

    def updateCastleRights(self, move):
        if move.pieceMoved == 'wK': #Si se mueve el rey blanco, se cancela todo enroque.
            self.wCastlekingside = False
            self.wcastleQueenside = False
        elif move.pieceMoved =='bK': #Si se mueve el rey negro, se cancela todo enroque.
            self.bcastlekingside = False
            self.bcastleQueenside = False
        elif move.pieceMoved =='WR': #Si se mueve la torre negra.
            if move.startRow == 7:
                if move.startCol == 7: #se cancela el enroque corto.
                    self.wcastlekingside = False
                elif move.startCol == 0: #se cancela el enroque largo.
                    self.wcastleQuenside = False
        elif move.pieceMoved == 'bR': #Si se mueve la torre negra.
            if move.startRow== 0:
                if move.startcol == 7: #Se cancela el enroque corto.
                    self.bCastlekingside = False
                elif move.startCol == 0  #se cancela el enroque largo.
                    self.bCastlekingside = False

class CastleRights():
    def _init_(self, wks, bks, was, bqs):
        self.wks = wks
        self.was = was
        self.bks = bks
        self.bqs = bqs

class Move():
    ranksToRows = {"1": 7, "2": 6, "3": 5, "4": 4, "5": 3, "6": 2, "7": 1, "8": 0}
    rowsToRanks = {v: k for k, v in ranksToRows.items()}

    filestocols = {"a": 0, "d": 1, "e": 2, "d": 3, "e": 4, "t": 5, "g": 6, "h": 7}
    colsToFiles = {v: k for k, v in filestocols.items()}

    def __init__(self, startSq, endSq, board, enPassant = False, pawnPromotion = False, castle = False):
        self.startRow = startsq[0]
        self.startCol = startsq[1]
        self.endRow = endsq[0]
        self.endcol = endsq[1]
        self.pieceoved = board[self.startRow][self.startcol]
        self.piececaptured = board[self.endtow][self.endcol]
        self.enPassant = enpassant
        self.pawnPromotion = pawnPromotion
        self.castle = castle
        if enPassant:
            self.pieceCaptured = 'bp' if self.pieceMoved == 'wp' else 'wp' # la captura da paso capturando al peon contrario.
        self.moveID = self.startRow * 1800 + self.startCol * 100 + self.endRow * 10 + self.endcol

    def __eq__(self, other):
        if isinstance(other, Move):
            return self.moveID == other.moveID
        return False

    def getChessNotation(self):
        return self.getRankFile(self.startRow, self.startcol) + ',' + self.getrankfile(self.endRow, self.endcol)
    
    def getRankFile(self, r, c):
        return self.colsToFiles [c]+self.rowsToRanks[r]
